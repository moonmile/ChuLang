// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open Grm

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LET
  | IF
  | FUN
  | THEN
  | ELSE
  | ARROW_LEFT
  | ARROW_RIGHT
  | EMOJI of (System.String)
  | NAME of (System.String)
  | STRING of (System.String)
  | INT of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LET
    | TOKEN_IF
    | TOKEN_FUN
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_ARROW_LEFT
    | TOKEN_ARROW_RIGHT
    | TOKEN_EMOJI
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_STATEMENT
    | NONTERM_PARAM
    | NONTERM_EXPR
    | NONTERM_ATOM

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LET  -> 1 
  | IF  -> 2 
  | FUN  -> 3 
  | THEN  -> 4 
  | ELSE  -> 5 
  | ARROW_LEFT  -> 6 
  | ARROW_RIGHT  -> 7 
  | EMOJI _ -> 8 
  | NAME _ -> 9 
  | STRING _ -> 10 
  | INT _ -> 11 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LET 
  | 2 -> TOKEN_IF 
  | 3 -> TOKEN_FUN 
  | 4 -> TOKEN_THEN 
  | 5 -> TOKEN_ELSE 
  | 6 -> TOKEN_ARROW_LEFT 
  | 7 -> TOKEN_ARROW_RIGHT 
  | 8 -> TOKEN_EMOJI 
  | 9 -> TOKEN_NAME 
  | 10 -> TOKEN_STRING 
  | 11 -> TOKEN_INT 
  | 14 -> TOKEN_end_of_input
  | 12 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_STATEMENT 
    | 4 -> NONTERM_STATEMENT 
    | 5 -> NONTERM_STATEMENT 
    | 6 -> NONTERM_STATEMENT 
    | 7 -> NONTERM_STATEMENT 
    | 8 -> NONTERM_STATEMENT 
    | 9 -> NONTERM_STATEMENT 
    | 10 -> NONTERM_PARAM 
    | 11 -> NONTERM_PARAM 
    | 12 -> NONTERM_EXPR 
    | 13 -> NONTERM_EXPR 
    | 14 -> NONTERM_ATOM 
    | 15 -> NONTERM_ATOM 
    | 16 -> NONTERM_ATOM 
    | 17 -> NONTERM_ATOM 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 14 
let _fsyacc_tagOfErrorTerminal = 12

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LET  -> "LET" 
  | IF  -> "IF" 
  | FUN  -> "FUN" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | ARROW_LEFT  -> "ARROW_LEFT" 
  | ARROW_RIGHT  -> "ARROW_RIGHT" 
  | EMOJI _ -> "EMOJI" 
  | NAME _ -> "NAME" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ARROW_LEFT  -> (null : System.Object) 
  | ARROW_RIGHT  -> (null : System.Object) 
  | EMOJI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 3us; 1us; 65535us; 21us; 22us; 5us; 65535us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 23us; 24us; 14us; 65535us; 0us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 27us; 14us; 27us; 16us; 27us; 18us; 27us; 20us; 21us; 21us; 25us; 22us; 26us; 23us; 27us; 27us; 28us; 28us; 29us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 15us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 2us; 4us; 5us; 2us; 4us; 5us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 3us; 6us; 7us; 8us; 3us; 6us; 7us; 8us; 2us; 6us; 7us; 2us; 6us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 2us; 9us; 11us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 2us; 12us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 18us; 20us; 22us; 24us; 26us; 30us; 34us; 37us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 55us; 57us; 59us; 61us; 63us; 66us; 68us; 70us; 72us; 74us; 76us; |]
let _fsyacc_action_rows = 34
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 6us; 2us; 12us; 3us; 20us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 0us; 4us; 0us; 16386us; 0us; 16387us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 2us; 32768us; 6us; 8us; 7us; 10us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 16388us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 16389us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 2us; 32768us; 4us; 14us; 5us; 18us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 1us; 16390us; 5us; 16us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 16391us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 16392us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 5us; 32768us; 7us; 23us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 4us; 16396us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 4us; 32768us; 8us; 32us; 9us; 33us; 10us; 31us; 11us; 30us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 10us; 12us; 13us; 14us; 19us; 22us; 27us; 28us; 33us; 34us; 39us; 42us; 47us; 49us; 54us; 55us; 60us; 61us; 66us; 71us; 77us; 82us; 83us; 84us; 85us; 90us; 95us; 96us; 97us; 98us; 99us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 4us; 4us; 4us; 6us; 4us; 5us; 1us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 16397us; 16398us; 16399us; 16400us; 16401us; |]
let _fsyacc_reductions ()  =    [| 
# 154 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Grm.STATEMENT )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 163 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "Parser.fsy"
                                   _1 
                   )
# 16 "Parser.fsy"
                 :  Grm.STATEMENT ));
# 174 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'STATEMENT)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                         _1 
                   )
# 18 "Parser.fsy"
                 : 'Prog));
# 185 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                               STATEMENT.ATOM(_1)
                   )
# 20 "Parser.fsy"
                 : 'STATEMENT));
# 196 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                                    STATEMENT.LET(_2,_4)
                   )
# 21 "Parser.fsy"
                 : 'STATEMENT));
# 208 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                                    STATEMENT.LET(_2,_4)
                   )
# 22 "Parser.fsy"
                 : 'STATEMENT));
# 220 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                            STATEMENT.IF( _2, _4, EXPR.NONE ) 
                   )
# 23 "Parser.fsy"
                 : 'STATEMENT));
# 232 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                                      STATEMENT.IF( _2, _4, _6) 
                   )
# 24 "Parser.fsy"
                 : 'STATEMENT));
# 245 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                            STATEMENT.IF( _2, EXPR.NONE ,_4 ) 
                   )
# 25 "Parser.fsy"
                 : 'STATEMENT));
# 257 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PARAM)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXPR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                          STATEMENT.FUN( _2,_3,_5)
                   )
# 26 "Parser.fsy"
                 : 'STATEMENT));
# 270 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                               PARAM.ATOM( _1 )
                   )
# 28 "Parser.fsy"
                 : 'PARAM));
# 281 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PARAM)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                     PARAM.PARAM( _1,_2 )
                   )
# 29 "Parser.fsy"
                 : 'PARAM));
# 293 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                               EXPR.ATOM(_1)
                   )
# 31 "Parser.fsy"
                 : 'EXPR));
# 304 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                         EXPR.EXPR(_1,_2,_3)
                   )
# 32 "Parser.fsy"
                 : 'EXPR));
# 317 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                               ATOM.INT(_1) 
                   )
# 34 "Parser.fsy"
                 : 'ATOM));
# 328 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                 ATOM.STRING(_1) 
                   )
# 35 "Parser.fsy"
                 : 'ATOM));
# 339 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                 ATOM.EMOJI(_1) 
                   )
# 36 "Parser.fsy"
                 : 'ATOM));
# 350 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                ATOM.NAME(_1) 
                   )
# 37 "Parser.fsy"
                 : 'ATOM));
|]
# 362 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 15;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Grm.STATEMENT  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))

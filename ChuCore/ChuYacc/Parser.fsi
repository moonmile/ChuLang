// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | LET
  | IF
  | FUN
  | THEN
  | ELSE
  | ARROW_LEFT
  | ARROW_RIGHT
  | EMOJI of (System.String)
  | NAME of (System.String)
  | STRING of (System.String)
  | INT of (System.Int32)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LET
    | TOKEN_IF
    | TOKEN_FUN
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_ARROW_LEFT
    | TOKEN_ARROW_RIGHT
    | TOKEN_EMOJI
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_STATEMENT
    | NONTERM_PARAM
    | NONTERM_EXPR
    | NONTERM_ATOM
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Grm.STATEMENT ) 
